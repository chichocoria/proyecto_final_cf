pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/chichocoria/proyecto_final_cf.git'
        BRANCH = 'testing' // Cambia esto si necesitas otra rama
        IMAGE_NAME = 'chichocoria/avatares-devops-api'
        DOCKERFILE_PATH = 'avatares-devops/api/Dockerfile'
        CONTEXT = 'avatares-devops/api'
        registryCredential = 'chichocoria-dockerhub'
        VERSION = "${BUILD_NUMBER}"
        SONAR_AUTH_TOKEN = 'SonarQube-Token'
        SONAR_HOST_URL = 'http://192.168.52.237:9000'
        SONARQUBE_PROJECT_KEY = 'devops-codfac'
        SONARQUBE_ENV = 'SonarQube'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: "${BRANCH}", url: "${REPO_URL}"
            }
        }

        stage('SonarQube Analysis main') {
            steps {
                script {
                    def scannerHome = tool 'SonarQube'
                    withSonarQubeEnv('SonarQube') {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} -Dsonar.sources=. -Dsonar.host.url=${env.SONAR_HOST_URL} -Dsonar.login=${env.SONAR_AUTH_TOKEN}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def fullImageName = "${IMAGE_NAME}:${VERSION}"
                    docker.build(fullImageName, "-f ${DOCKERFILE_PATH} ${CONTEXT}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def fullImageName = "${IMAGE_NAME}:${VERSION}"
                    docker.withRegistry( '', registryCredential) {
                        docker.image(fullImageName).push()
                        docker.image("latest").push()
                    }
                }
            }
        }

        stage('Update GIT') {
        script {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                withCredentials([usernamePassword(credentialsId: 'github', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh "git config user.email chicho@gmail.com"
                    sh "git config user.name ChichoCoria"
                    sh "cat k8s/01-deployment-avatares-api.yaml"
                    sh "sed -i 's+chichocoria/avatares-devops-api:.*+${IMAGE_NAME}:${VERSION}+g' k8s/01-deployment-avatares-api.yaml"
                    sh "cat k8s/01-deployment-avatares-api.yaml"
                    sh "git add ."
                    sh "git commit -m 'update de manifest del back a la version: ${VERSION}'"
                    sh "git push @github.com/${GIT_USERNAME}/jenkins-gitops-k8s.git">https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${GIT_USERNAME}/proyecto_final_cf.git"
                }
            }
        }
    }

        stage('Remove Unused docker image') {
          steps{
            sh "docker rmi ${IMAGE_NAME}:${VERSION}"
            }
        }
    }
}